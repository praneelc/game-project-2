//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Scripts/ViveInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ViveInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ViveInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ViveInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""51ba7164-98b2-472b-b173-5573cdeb0a68"",
            ""actions"": [
                {
                    ""name"": ""LeftHandClose"",
                    ""type"": ""Button"",
                    ""id"": ""d82ce44c-c012-4011-a49e-84ae12c13c20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandClose"",
                    ""type"": ""Button"",
                    ""id"": ""20111207-1267-4fc0-9e38-b3e6b0e6c701"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShowUI"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3f70556c-281a-4717-87e7-cde26c781700"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f59d3886-56ee-4690-91d0-310b5b56b63f"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{LeftHand}/triggerpressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e337f3e2-a13c-47ce-93b3-fabaa7bb2547"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{RightHand}/triggerpressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bffdda61-de2f-4f52-a811-5761c66cee09"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{LeftHand}/grippressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_LeftHandClose = m_Player.FindAction("LeftHandClose", throwIfNotFound: true);
        m_Player_RightHandClose = m_Player.FindAction("RightHandClose", throwIfNotFound: true);
        m_Player_ShowUI = m_Player.FindAction("ShowUI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_LeftHandClose;
    private readonly InputAction m_Player_RightHandClose;
    private readonly InputAction m_Player_ShowUI;
    public struct PlayerActions
    {
        private @ViveInputActions m_Wrapper;
        public PlayerActions(@ViveInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftHandClose => m_Wrapper.m_Player_LeftHandClose;
        public InputAction @RightHandClose => m_Wrapper.m_Player_RightHandClose;
        public InputAction @ShowUI => m_Wrapper.m_Player_ShowUI;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @LeftHandClose.started += instance.OnLeftHandClose;
            @LeftHandClose.performed += instance.OnLeftHandClose;
            @LeftHandClose.canceled += instance.OnLeftHandClose;
            @RightHandClose.started += instance.OnRightHandClose;
            @RightHandClose.performed += instance.OnRightHandClose;
            @RightHandClose.canceled += instance.OnRightHandClose;
            @ShowUI.started += instance.OnShowUI;
            @ShowUI.performed += instance.OnShowUI;
            @ShowUI.canceled += instance.OnShowUI;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @LeftHandClose.started -= instance.OnLeftHandClose;
            @LeftHandClose.performed -= instance.OnLeftHandClose;
            @LeftHandClose.canceled -= instance.OnLeftHandClose;
            @RightHandClose.started -= instance.OnRightHandClose;
            @RightHandClose.performed -= instance.OnRightHandClose;
            @RightHandClose.canceled -= instance.OnRightHandClose;
            @ShowUI.started -= instance.OnShowUI;
            @ShowUI.performed -= instance.OnShowUI;
            @ShowUI.canceled -= instance.OnShowUI;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnLeftHandClose(InputAction.CallbackContext context);
        void OnRightHandClose(InputAction.CallbackContext context);
        void OnShowUI(InputAction.CallbackContext context);
    }
}
